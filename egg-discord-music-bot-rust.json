{
    "_comment": "Discord Music Bot Rust - Pterodactyl Egg",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2025-10-19T00:00:00+00:00",
    "name": "Discord Music Bot (Rust)",
    "author": "discord@bot.com",
    "description": "Un bot Discord haute performance écrit en Rust pour lire de la musique YouTube dans les salons vocaux avec interface interactive.",
    "features": [
        "eula"
    ],
    "docker_images": {
        "ghcr.io/parkervcp/yolks:debian": "ghcr.io/parkervcp/yolks:debian"
    },
    "file_denylist": [],
    "startup": "#!/bin/bash\n# Charger Rust dans l'environnement\nexport PATH=\"$HOME/.cargo/bin:$PATH\"\nsource $HOME/.cargo/env 2>/dev/null || true\n\n# Déterminer le chemin du binaire selon le profil\nif [[ \"{{BUILD_PROFILE}}\" == \"debug\" ]]; then\n    BINARY_PATH=\"./target/debug/discord-music-bot\"\nelse\n    BINARY_PATH=\"./target/release/discord-music-bot\"\nfi\n\n# Mise à jour automatique si activée\nif [[ -d .git ]] && [[ {{AUTO_UPDATE}} == \"1\" ]]; then\n    echo \"Mise à jour depuis GitHub...\"\n    git pull\n    echo \"Recompilation du projet avec profil: {{BUILD_PROFILE}}...\"\n    \n    if [[ \"{{BUILD_PROFILE}}\" == \"release\" ]]; then\n        cargo build --release\n    elif [[ \"{{BUILD_PROFILE}}\" == \"fast\" ]]; then\n        cargo build --profile fast\n    elif [[ \"{{BUILD_PROFILE}}\" == \"debug\" ]]; then\n        cargo build\n    else\n        echo \"Profil inconnu: {{BUILD_PROFILE}}, utilisation de release par défaut\"\n        cargo build --release\n    fi\nfi\n\n# Vérifier et installer FFmpeg si nécessaire\nif ! command -v ffmpeg &> /dev/null; then\n    echo \"Installation de FFmpeg et yt-dlp...\"\n    apt update && apt install -y ffmpeg yt-dlp\nfi\n\n# Lancer le bot\nif [[ -f \"$BINARY_PATH\" ]]; then\n    echo \"Lancement du bot depuis: $BINARY_PATH\"\n    \"$BINARY_PATH\"\nelse\n    echo \"ERREUR: Le binaire n'existe pas à $BINARY_PATH\"\n    echo \"Veuillez réinstaller le serveur ou vérifier le profil de compilation.\"\n    exit 1\nfi",
    "config": {
        "files": "{}",
        "startup": "{\r\n    \"done\": \"est connect\\u00e9 et pr\\u00eat\"\r\n}",
        "logs": "{}",
        "stop": "^C"
    },
    "scripts": {
        "installation": {
            "script": "#!/bin/bash\n# Discord Music Bot Rust - Script d'installation avec choix de profil\n\nset -e  # Arrêter en cas d'erreur\n\necho \"═══════════════════════════════════════════════════════════\"\necho \"  Installation Discord Music Bot (Rust)\"\necho \"  Profil de compilation: ${BUILD_PROFILE}\"\necho \"═══════════════════════════════════════════════════════════\"\n\n# Mise à jour et installation des dépendances système\necho \"\"\necho \"[1/5] Installation des dépendances système...\"\napt update -qq\napt install -y -qq git curl wget ffmpeg yt-dlp pkg-config libssl-dev build-essential ca-certificates\n\necho \"✓ Dépendances système installées\"\n\n# Installation de Rust\necho \"\"\necho \"[2/5] Installation de Rust...\"\nif ! command -v cargo &> /dev/null; then\n    echo \"Installation de Rust via rustup...\"\n    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable\n    export PATH=\"$HOME/.cargo/bin:$PATH\"\n    source \"$HOME/.cargo/env\"\n    echo \"✓ Rust installé avec succès\"\nelse\n    echo \"✓ Rust déjà installé\"\n    export PATH=\"$HOME/.cargo/bin:$PATH\"\n    source \"$HOME/.cargo/env\" 2>/dev/null || true\nfi\n\n# Vérifier l'installation de Rust\nif ! command -v cargo &> /dev/null; then\n    echo \"✗ ERREUR: Cargo n'est pas disponible après installation\"\n    echo \"Tentative de chargement manuel...\"\n    export PATH=\"$HOME/.cargo/bin:$PATH\"\n    source \"$HOME/.cargo/env\"\nfi\n\necho \"Version Rust: $(rustc --version)\"\necho \"Version Cargo: $(cargo --version)\"\n\n# Cloner ou utiliser les fichiers existants\ncd /mnt/server\n\necho \"\"\necho \"[3/5] Récupération du code source...\"\n\nif [ \"${USER_UPLOAD}\" == \"true\" ] || [ \"${USER_UPLOAD}\" == \"1\" ]; then\n    echo \"Mode: Fichiers uploadés par l'utilisateur\"\n    if [ ! -f Cargo.toml ]; then\n        echo \"⚠ Cargo.toml introuvable, clonage depuis GitHub...\"\n        MODIFIED_GIT_REPO=$(echo ${GIT_ADDRESS} | sed 's|https://||g' | sed 's|http://||g')\n        if [ -z \"${USERNAME}\" ] && [ -z \"${ACCESS_TOKEN}\" ]; then\n            git clone https://${MODIFIED_GIT_REPO} .\n        else\n            git clone https://${USERNAME}:${ACCESS_TOKEN}@${MODIFIED_GIT_REPO} .\n        fi\n    else\n        echo \"✓ Fichiers utilisateur détectés\"\n    fi\nelse\n    echo \"Mode: Clonage depuis GitHub\"\n    MODIFIED_GIT_REPO=$(echo ${GIT_ADDRESS} | sed 's|https://||g' | sed 's|http://||g')\n    \n    if [ -d .git ]; then\n        echo \"Dépôt Git existant détecté, mise à jour...\"\n        git fetch --all\n        git reset --hard origin/main || git reset --hard origin/master\n    else\n        echo \"Clonage du dépôt...\"\n        if [ -z \"${USERNAME}\" ] && [ -z \"${ACCESS_TOKEN}\" ]; then\n            git clone https://${MODIFIED_GIT_REPO} .\n        else\n            git clone https://${USERNAME}:${ACCESS_TOKEN}@${MODIFIED_GIT_REPO} .\n        fi\n    fi\nfi\n\necho \"✓ Code source récupéré\"\n\n# Vérifier la présence de Cargo.toml\nif [ ! -f Cargo.toml ]; then\n    echo \"✗ ERREUR: Cargo.toml introuvable!\"\n    echo \"Le dépôt ne semble pas être un projet Rust valide.\"\n    exit 1\nfi\n\necho \"\"\necho \"[4/5] Configuration de l'environnement Rust...\"\n\n# S'assurer que Rust est dans le PATH\nexport PATH=\"$HOME/.cargo/bin:$PATH\"\nsource \"$HOME/.cargo/env\" 2>/dev/null || true\n\n# Créer le fichier .cargo/env pour le runtime\nmkdir -p $HOME/.cargo\ncat > $HOME/.cargo/env << 'EOF'\nexport PATH=\"$HOME/.cargo/bin:$PATH\"\nEOF\n\necho \"✓ Environnement configuré\"\n\n# Compilation du projet avec le profil choisi\necho \"\"\necho \"[5/5] Compilation du projet Rust...\"\necho \"Profil sélectionné: ${BUILD_PROFILE}\"\necho \"\"\n\n# Afficher les informations sur le profil\ncase \"${BUILD_PROFILE}\" in\n    \"release\")\n        echo \"📊 Profil RELEASE (optimisé):\"\n        echo \"   - RAM nécessaire: ~1.5 GB\"\n        echo \"   - Temps de compilation: 5-7 minutes\"\n        echo \"   - Performance: 95%\"\n        echo \"   - Taille binaire: ~18 MB\"\n        BUILD_CMD=\"cargo build --release\"\n        BINARY_PATH=\"target/release/discord-music-bot\"\n        ;;\n    \"fast\")\n        echo \"⚡ Profil FAST (compilation rapide):\"\n        echo \"   - RAM nécessaire: ~800 MB\"\n        echo \"   - Temps de compilation: 2-3 minutes\"\n        echo \"   - Performance: 85%\"\n        echo \"   - Taille binaire: ~25 MB\"\n        BUILD_CMD=\"cargo build --profile fast\"\n        BINARY_PATH=\"target/release/discord-music-bot\"\n        ;;\n    \"debug\")\n        echo \"🐛 Profil DEBUG (développement):\"\n        echo \"   - RAM nécessaire: ~500 MB\"\n        echo \"   - Temps de compilation: 1-2 minutes\"\n        echo \"   - Performance: 30-40%\"\n        echo \"   - Taille binaire: ~100 MB\"\n        echo \"   ⚠ Ce profil est LENT, utilisez-le uniquement pour le développement!\"\n        BUILD_CMD=\"cargo build\"\n        BINARY_PATH=\"target/debug/discord-music-bot\"\n        ;;\n    *)\n        echo \"⚠ Profil inconnu: ${BUILD_PROFILE}\"\n        echo \"Utilisation du profil release par défaut\"\n        BUILD_CMD=\"cargo build --release\"\n        BINARY_PATH=\"target/release/discord-music-bot\"\n        ;;\nesac\n\necho \"\"\necho \"⏳ Compilation en cours, soyez patient...\"\necho \"\"\n\n# Compiler le projet\nif ${BUILD_CMD}; then\n    echo \"\"\n    echo \"═══════════════════════════════════════════════════════════\"\n    echo \"  ✓ Compilation réussie!\"\n    echo \"═══════════════════════════════════════════════════════════\"\n    \n    # Vérifier que le binaire existe\n    if [ -f \"${BINARY_PATH}\" ]; then\n        echo \"✓ Binaire créé: ${BINARY_PATH}\"\n        ls -lh \"${BINARY_PATH}\"\n    else\n        echo \"⚠ Attention: Le binaire n'a pas été trouvé à ${BINARY_PATH}\"\n        echo \"Recherche du binaire...\"\n        find target -type f -name \"discord-music-bot\" -ls\n    fi\nelse\n    echo \"\"\n    echo \"═══════════════════════════════════════════════════════════\"\n    echo \"  ✗ ERREUR DE COMPILATION\"\n    echo \"═══════════════════════════════════════════════════════════\"\n    echo \"\"\n    echo \"La compilation a échoué avec le profil: ${BUILD_PROFILE}\"\n    echo \"\"\n    echo \"Causes possibles:\"\n    echo \"  - Mémoire insuffisante pour ce profil\"\n    echo \"  - Dépendances manquantes\"\n    echo \"  - Erreur dans le code source\"\n    echo \"\"\n    echo \"Solutions:\"\n    echo \"  1. Essayez le profil 'fast' (moins de RAM nécessaire)\"\n    echo \"  2. Augmentez la RAM allouée au serveur\"\n    echo \"  3. Vérifiez les logs ci-dessus pour plus de détails\"\n    echo \"\"\n    exit 1\nfi\n\necho \"\"\necho \"═══════════════════════════════════════════════════════════\"\necho \"  ✓ Installation terminée avec succès!\"\necho \"═══════════════════════════════════════════════════════════\"\necho \"\"\necho \"Prochaines étapes:\"\necho \"  1. Configurez votre DISCORD_BOT_TOKEN dans l'onglet Startup\"\necho \"  2. Démarrez le serveur\"\necho \"  3. Le bot se connectera automatiquement à Discord\"\necho \"\"\necho \"Informations système:\"\necho \"  - FFmpeg: $(ffmpeg -version 2>&1 | head -n1)\"\necho \"  - yt-dlp: $(yt-dlp --version 2>&1)\"\necho \"  - Rust: $(rustc --version)\"\necho \"  - Profil utilisé: ${BUILD_PROFILE}\"\necho \"\"\necho \"═══════════════════════════════════════════════════════════\"\n",
            "container": "ghcr.io/parkervcp/installers:debian",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "Discord Bot Token",
            "description": "Le token de votre bot Discord. Obtenez-le sur https://discord.com/developers/applications",
            "env_variable": "DISCORD_BOT_TOKEN",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string",
            "field_type": "text"
        },
        {
            "name": "Build Profile",
            "description": "Profil de compilation: 'release' (optimisé, 1.5GB RAM), 'fast' (rapide, 800MB RAM), 'debug' (dev, 500MB RAM)",
            "env_variable": "BUILD_PROFILE",
            "default_value": "release",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|in:release,fast,debug",
            "field_type": "text"
        },
        {
            "name": "Git Repository Address",
            "description": "Adresse du dépôt GitHub (sans https://)",
            "env_variable": "GIT_ADDRESS",
            "default_value": "github.com/LHRICO78/discord-music-bot-rust.git",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Git Username",
            "description": "Nom d'utilisateur GitHub (optionnel, pour les dépôts privés)",
            "env_variable": "USERNAME",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Git Access Token",
            "description": "Token d'accès GitHub (optionnel, pour les dépôts privés)",
            "env_variable": "ACCESS_TOKEN",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Auto Update",
            "description": "Mettre à jour automatiquement depuis GitHub au démarrage (1 = oui, 0 = non)",
            "env_variable": "AUTO_UPDATE",
            "default_value": "1",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "User Upload",
            "description": "Ignorer le clonage Git et utiliser les fichiers uploadés (true/false)",
            "env_variable": "USER_UPLOAD",
            "default_value": "false",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|in:true,false",
            "field_type": "text"
        },
        {
            "name": "Rust Log Level",
            "description": "Niveau de log Rust (trace, debug, info, warn, error)",
            "env_variable": "RUST_LOG",
            "default_value": "info",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|in:trace,debug,info,warn,error",
            "field_type": "text"
        }
    ]
}

